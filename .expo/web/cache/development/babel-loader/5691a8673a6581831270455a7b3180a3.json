{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ankitmehta/Desktop/picturesque2.0/components/Themed.tsx\";\nvar _excluded = [\"style\", \"lightColor\", \"darkColor\"],\n    _excluded2 = [\"style\", \"lightColor\", \"darkColor\"],\n    _excluded3 = [\"style\", \"lightColor\", \"darkColor\"],\n    _excluded4 = [\"style\", \"lightColor\", \"darkColor\"],\n    _excluded5 = [\"style\", \"lightColor\", \"darkColor\"];\nimport * as React from 'react';\nimport DefaultView from \"react-native-web/dist/exports/View\";\nimport DefaultScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport DefaultActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Text as DefaultText, ListItem as DefaultListItem } from 'react-native-elements';\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nexport function useThemeColor(props, colorName) {\n  var theme = useColorScheme();\n  var colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\nexport function Text(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded);\n\n  var color = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'text');\n  return React.createElement(DefaultText, _extends({\n    style: [{\n      color: color\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }\n  }));\n}\nexport function View(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded2);\n\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'background');\n  return React.createElement(DefaultView, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }));\n}\nexport function ScrollView(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded3);\n\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'background');\n  return React.createElement(DefaultScrollView, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 10\n    }\n  }));\n}\nexport function getColor(property) {\n  var theme = useColorScheme();\n  var color = Colors[theme][property];\n  return color;\n}\nexport function ActivityIndicator(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded4);\n\n  var textColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'text');\n  return React.createElement(DefaultActivityIndicator, {\n    size: \"large\",\n    color: textColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 10\n    }\n  });\n}\nexport function ListItem(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded5);\n\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'background');\n  var color = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'text');\n  return React.createElement(DefaultListItem, _extends({\n    containerStyle: [{\n      backgroundColor: backgroundColor,\n      color: color\n    }, style],\n    style: [{\n      backgroundColor: backgroundColor,\n      color: color\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ankitmehta/Desktop/picturesque2.0/components/Themed.tsx"],"names":["React","Text","DefaultText","ListItem","DefaultListItem","Colors","useColorScheme","useThemeColor","props","colorName","theme","colorFromProps","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","ScrollView","getColor","property","ActivityIndicator","textColor"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAEA,SAAQC,IAAI,IAAIC,WAAhB,EAA6BC,QAAQ,IAAIC,eAAzC,QAAgE,uBAAhE;AAEA,OAAOC,MAAP;AACA,OAAOC,cAAP;AAEA,OAAO,SAASC,aAAT,CACLC,KADK,EAELC,SAFK,EAGL;AACA,MAAMC,KAAK,GAAGJ,cAAc,EAA5B;AACA,MAAMK,cAAc,GAAGH,KAAK,CAACE,KAAD,CAA5B;;AAEA,MAAIC,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD,GAFD,MAEO;AACL,WAAON,MAAM,CAACK,KAAD,CAAN,CAAcD,SAAd,CAAP;AACD;AACF;AAUD,OAAO,SAASR,IAAT,CAAcO,KAAd,EAAgC;AACrC,MAAQI,KAAR,GAAwDJ,KAAxD,CAAQI,KAAR;AAAA,MAAeC,UAAf,GAAwDL,KAAxD,CAAeK,UAAf;AAAA,MAA2BC,SAA3B,GAAwDN,KAAxD,CAA2BM,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDP,KAAxD;;AACA,MAAMQ,KAAK,GAAGT,aAAa,CAAC;AAAEU,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,MAAzC,CAA3B;AAEA,SAAO,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEE,MAAAA,KAAK,EAALA;AAAF,KAAD,EAAYJ,KAAZ;AAApB,KAA4CG,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAED,OAAO,SAASI,IAAT,CAAcX,KAAd,EAAgC;AACrC,MAAQI,KAAR,GAAwDJ,KAAxD,CAAQI,KAAR;AAAA,MAAeC,UAAf,GAAwDL,KAAxD,CAAeK,UAAf;AAAA,MAA2BC,SAA3B,GAAwDN,KAAxD,CAA2BM,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDP,KAAxD;;AACA,MAAMY,eAAe,GAAGb,aAAa,CAAC;AAAEU,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,YAAzC,CAArC;AAEA,SAAO,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEM,MAAAA,eAAe,EAAfA;AAAF,KAAD,EAAsBR,KAAtB;AAApB,KAAsDG,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAED,OAAO,SAASM,UAAT,CAAoBb,KAApB,EAAsC;AAC3C,MAAQI,KAAR,GAAwDJ,KAAxD,CAAQI,KAAR;AAAA,MAAeC,UAAf,GAAwDL,KAAxD,CAAeK,UAAf;AAAA,MAA2BC,SAA3B,GAAwDN,KAAxD,CAA2BM,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDP,KAAxD;;AACA,MAAMY,eAAe,GAAGb,aAAa,CAAC;AAAEU,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,YAAzC,CAArC;AAEA,SAAO,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAE,CAAC;AAAEM,MAAAA,eAAe,EAAfA;AAAF,KAAD,EAAsBR,KAAtB;AAA1B,KAA4DG,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAGD,OAAO,SAASO,QAAT,CAAkBC,QAAlB,EAAgF;AAGrF,MAAMb,KAAK,GAAGJ,cAAc,EAA5B;AAGA,MAAMU,KAAK,GAAIX,MAAM,CAACK,KAAD,CAAN,CAAca,QAAd,CAAf;AACA,SAAOP,KAAP;AACD;AAED,OAAO,SAASQ,iBAAT,CAA2BhB,KAA3B,EAA6C;AAClD,MAAQI,KAAR,GAAwDJ,KAAxD,CAAQI,KAAR;AAAA,MAAeC,UAAf,GAAwDL,KAAxD,CAAeK,UAAf;AAAA,MAA2BC,SAA3B,GAAwDN,KAAxD,CAA2BM,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDP,KAAxD;;AACA,MAAMiB,SAAS,GAAGlB,aAAa,CAAC;AAAEU,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,MAAzC,CAA/B;AAEA,SAAO,oBAAC,wBAAD;AAA0B,IAAA,IAAI,EAAC,OAA/B;AAAuC,IAAA,KAAK,EAAEW,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;AAGD,OAAO,SAAStB,QAAT,CAAkBK,KAAlB,EAA8B;AACnC,MAAQI,KAAR,GAAwDJ,KAAxD,CAAQI,KAAR;AAAA,MAAeC,UAAf,GAAwDL,KAAxD,CAAeK,UAAf;AAAA,MAA2BC,SAA3B,GAAwDN,KAAxD,CAA2BM,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDP,KAAxD;;AACA,MAAMY,eAAe,GAAGb,aAAa,CAAC;AAAEU,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,YAAzC,CAArC;AACA,MAAME,KAAK,GAAGT,aAAa,CAAC;AAAEU,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,MAAzC,CAA3B;AAGA,SAAO,oBAAC,eAAD;AAAiB,IAAA,cAAc,EAAE,CAAC;AAAEM,MAAAA,eAAe,EAAfA,eAAF;AAAkBJ,MAAAA,KAAK,EAALA;AAAlB,KAAD,EAA4BJ,KAA5B,CAAjC;AAAqE,IAAA,KAAK,EAAE,CAAC;AAAEQ,MAAAA,eAAe,EAAfA,eAAF;AAAkBJ,MAAAA,KAAK,EAALA;AAAlB,KAAD,EAA4BJ,KAA5B;AAA5E,KAAoHG,UAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { View as DefaultView ,ScrollView as DefaultScrollView, ActivityIndicator as DefaultActivityIndicator } from 'react-native';\nimport {Text as DefaultText, ListItem as DefaultListItem } from 'react-native-elements';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n\nexport function ScrollView(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultScrollView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n\n\nexport function getColor(property:keyof typeof Colors.light & keyof typeof Colors.dark){\n\n  //const backgroundColor = useThemeColor({ light: Colors.lightColor, dark: darkColor }, property);\n  const theme = useColorScheme();\n\n  \n  const color =  Colors[theme][property];\n  return color as string;\n}\n\nexport function ActivityIndicator(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const textColor = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultActivityIndicator size=\"large\" color={textColor}/>\n}\n\n\nexport function ListItem(props: any) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n\n  return <DefaultListItem containerStyle={[{ backgroundColor,color }, style]} style={[{ backgroundColor,color }, style]} {...otherProps} />;\n}\n"]},"metadata":{},"sourceType":"module"}